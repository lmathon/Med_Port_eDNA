port_names <- ports
port_names[7] <- "St.Maries Mer"
## create list of the barplots
bp <- list()
for (i in 1: 7) {
to_plot <- df[which(df$Site %in% ports[i]),]
bp[[i]]<-ggplot(data=to_plot, aes(x=Campaign, y=R, fill=Campaign)) +
geom_bar( position = 'dodge',stat="identity") +
scale_fill_manual(values=c("lightblue","lightgreen", "sandybrown")) +
ylim(0,78) +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.position="none") +
labs(y="Species richness",
title=port_names[i]) +
scale_x_discrete(labels=c("Total","Autumn", "Spring")) +
theme(axis.text.y=element_text(colour="black",size=7)) +
theme(axis.text.x=element_text(colour="black",size=7, angle=30, vjust=0.8)) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x=element_blank())  +
theme(plot.title = element_text(colour="black", size=7, face="bold"))
}
names(bp) <- ports
bp
barfig1 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[1]]
dev.off()
barfig2 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[2]]
dev.off()
barfig3 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[3]]
dev.off()
barfig4 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[4]]
dev.off()
barfig5 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[5]]
dev.off()
barfig6 <- image_graph(width = 210, height = 250, res = 150, bg = 'transparent')
bp[[6]]
dev.off()
barfig7 <- image_graph(width = 200, height = 220, res = 150, bg = 'transparent')
bp[[7]]
dev.off()
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+600+460") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+500") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+600+420") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+460") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+600+520") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+560") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+610+500") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+540") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+620+500") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+540") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
final <- image_composite(fig, barfig1, offset = "+100+460")
final <- image_composite(final, barfig2, offset = "+970+250") #
final <- image_composite(final, barfig3, offset = "+620+480") #
final <- image_composite(final, barfig4, offset = "+250+380")
final <- image_composite(final, barfig5, offset = "+820+540") #
final <- image_composite(final, barfig6, offset = "+100+650") #
final <- image_composite(final, barfig7, offset = "+440+330") #
final
### Save the map
image_write(final, "01_Analyses_teleo/03_Outputs/Map_Richesse_total.png", density=300)
################################################################################
####### Plot lockdown / reserve / ports
################################################################################
# load data
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1)
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
meta_tot <- read.csv2("00_Metadata/metadata_tot.csv", header=T)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
View(meta_tot)
meta_tot <- read.csv("00_Metadata/metadata_tot.csv", header=T)
View(meta_tot)
View(meta_tot2)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen")
View(ind_all)
meta_tot[c(1,25),]
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
meta_tot <- read.csv("00_Metadata/metadata_tot.csv", header=T)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen")
View(ind_all)
ind_nat <- read.csv("01_Analyses_teleo/00_data/indicators_milieu_naturel.csv", header=T, row.names = 1) %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_nat[,c("SPYGEN_code", "protection")], by=c("Sample"="SPYGEN_code")) %>%
rename(Location = protection) %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_ports))
################################################################################
####### Plot lockdown / reserve / ports
################################################################################
# load data
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1)
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
meta_tot <- read.csv("00_Metadata/metadata_tot.csv", header=T)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
View(ind_nat)
unique(rownames(ind_all))
View(ind_all)
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen")
View(ind_all)
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
left_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
View(ind_ports)
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1) %>%
mutate(Location = "port")
# Charger datas milieu naturel (= réserve et hors réserve)
meta_nat <- read.csv2("00_Metadata/metadata_milieu_naturel.csv", header=T)
ind_nat <- read.csv("01_Analyses_teleo/00_data/indicators_milieu_naturel.csv", header=T, row.names = 1) %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_nat[,c("SPYGEN_code", "protection")], by=c("Sample"="SPYGEN_code")) %>%
rename(Location = protection) %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_ports))
# Combiner les deux datasets
ind_all <- rbind(ind_nat,ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
# Boxplots
# Renommer les points milieu naturel = outside et reserve en "hors port"
ind_all$Location <- sub(pattern = "outside",  replacement = "hors port", ind_all$Location)
ind_all$Location <- sub(pattern = "reserve",  replacement = "hors port", ind_all$Location)
ind_all$Location <- factor(ind_all$Location,                                    # Factor levels in decreasing order
levels = c("hors port","port"))
View(ind_all)
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
View(meta_tot)
View(meta)
View(ind_ports)
View(meta)
View(meta)
biohut <- meta %>%
filter(type == "BIOHUT_port") %>%
pull(coder_info())
biohut <- meta %>%
filter(type == "BIOHUT_port") %>%
pull(code_spygen)
View(ind_ports)
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1) %>%
mutate(Location = "port") %>%
dplyr::filter(colnames(.) %in% biohut == F)
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1) %>%
mutate(Location = "port") %>%
dplyr::filter(!rownames(.) %in% biohut)
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
meta_tot <- read.csv("00_Metadata/metadata_tot.csv", header=T)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
View(ind_ports)
################################################################################
####### Plot lockdown / reserve / ports
################################################################################
# load data
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1) %>%
dplyr::filter(!rownames(.) %in% biohut)
# Combiner les deux datasets
ind_all <- rbind(ind_nat[,1:14],ind_ports) %>%
mutate(DeBRa = log10(DeBRa))
meta_tot <- read.csv("00_Metadata/metadata_tot.csv", header=T)
meta_tot <- meta_tot %>%
filter(habitat != "BIOHUT_port")
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
column_to_rownames(var="code_spygen") %>%
mutate_at('Confinement', as.factor)
ind_all <- ind_all %>%
rownames_to_column(var="code_spygen") %>%
inner_join(meta_tot, by="code_spygen") %>%
mutate_at('Confinement', as.factor)
ind_all$habitat <- factor(ind_all$habitat, levels=c("reserve", "outside", "Port"))
ind_all$Confinement <- factor(ind_all$Confinement, labels=c("Unlock", "Lockdown"))
ind_names <- c("Total species richness", "Cryptobenthic species richness", "Threatened species richness", "Commercial species richness")
p <-list()
#####################################################################################
### Figures 3a
#####################################################################################
pdep <- readRDS("01_Analyses_teleo/02_Analyses/spaMM_Conditional_effect_variables.RDS")
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none",
axis.text.y=element_text(colour="black",size=14),
axis.text.x=element_text(colour="black",size=15),
axis.title.y=element_text(colour="black",size=14),
strip.text = element_text(size = 15),
axis.title.x=element_blank(),
plot.title = element_text(colour="black", size=15, face="bold", hjust=0.5),
plot.subtitle = element_text(colour="black", size=15,  hjust=0.5))
# load data ports
ind_ports <- read.csv("01_Analyses_teleo/00_data/indicators_ports_2022_per_filter.csv", header=T, row.names=1)
# Charger datas milieu naturel (= réserve et hors réserve)
meta_nat <- read.csv2("00_Metadata/metadata_milieu_naturel.csv", header=T)
ind_nat <- read.csv("01_Analyses_teleo/00_data/indicators_milieu_naturel.csv", header=T, row.names = 1) %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_nat, by=c("Sample"="SPYGEN_code")) %>%
rename(habitat = protection,
X = longitude_start_DD,
Y = latitude_start_DD) %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_ports), "habitat", "Confinement", "X", "Y") %>%
mutate(Confinement = case_when(Confinement == 'Y' ~ 'Lockdown',
TRUE ~ 'Unlock'))
### dataframe ports
meta_ports <- read.csv("00_Metadata/metadata_port.csv", header=T) %>%
filter(habitat == "Port")
### dataframe ports
meta_ports <- read.csv2("00_Metadata/metadata_port.csv", header=T) %>%
filter(habitat == "Port")
### dataframe ports
meta_ports <- read.csv2("00_Metadata/metadata_port.csv", header=T) %>%
filter(type == "Port")
ind_ports <- ind_ports %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_ports, by=c("Sample"="code_spygen")) %>%
mutate(Confinement = "Unlock") %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_nat))
ind_nat <- read.csv("01_Analyses_teleo/00_data/indicators_milieu_naturel.csv", header=T, row.names = 1) %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_nat, by=c("Sample"="SPYGEN_code")) %>%
rename(type = protection,
Longitude = longitude_start_DD,
Latitude = latitude_start_DD) %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_ports), "habitat", "Confinement", "X", "Y") %>%
mutate(Confinement = case_when(Confinement == 'Y' ~ 'Lockdown',
TRUE ~ 'Unlock'))
ind_nat <- read.csv("01_Analyses_teleo/00_data/indicators_milieu_naturel.csv", header=T, row.names = 1) %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_nat, by=c("Sample"="SPYGEN_code")) %>%
rename(type = protection,
Longitude = longitude_start_DD,
Latitude = latitude_start_DD) %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_ports), "type", "Confinement", "Longitude", "Latitude") %>%
mutate(Confinement = case_when(Confinement == 'Y' ~ 'Lockdown',
TRUE ~ 'Unlock'))
### dataframe ports
meta_ports <- read.csv2("00_Metadata/metadata_port.csv", header=T) %>%
filter(type == "Port")
ind_ports <- ind_ports %>%
rownames_to_column(var="Sample") %>%
inner_join(meta_ports, by=c("Sample"="code_spygen")) %>%
mutate(Confinement = "Unlock") %>%
column_to_rownames(var="Sample") %>%
dplyr::select(colnames(ind_nat))
# Combiner les deux datasets
ind_all <- rbind(ind_nat,ind_ports) %>%
mutate(DeBRa = log10(DeBRa)) %>%
mutate_at('Confinement', as.factor)  %>%
mutate_at('Longitude', as.numeric)  %>%
mutate_at('Latitude', as.numeric) %>%
mutate(Reserve = case_when(type == 'reserve' ~ 'Y',
TRUE ~ 'N')) %>%
mutate(Port = case_when(type == 'Port' ~ 'Y',
TRUE ~ 'N')) %>%
mutate_at('Reserve', as.factor) %>%
mutate_at('Port', as.factor)
ind_all$habitat <- factor(ind_all$type, levels=c("reserve", "outside", "Port"))
ind_all$Confinement <- factor(ind_all$Confinement, labels=c("Unlock", "Lockdown"))
ind_names <- c("Total species richness", "Cryptobenthic species richness", "Threatened species richness", "Commercial species richness")
# initiate plot list
p <- list()
## Loop to draw plots
for (i in 1:4) {
v_i <- pdep[[i]]
v_i$focal_var <- factor(v_i$focal_var, levels=c("reserve", "outside", "Port"))
v_i$Confinement <- factor(v_i$Confinement, levels=c("Unlock", "Lockdown"))
R2round <- round(R2[i], digit=3)
p[[i]] <- ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme
}
## Loop to draw plots
for (i in 1:4) {
v_i <- pdep[[i]]
v_i$focal_var <- factor(v_i$focal_var, levels=c("reserve", "outside", "Port"))
v_i$Confinement <- factor(v_i$Confinement, levels=c("Unlock", "Lockdown"))
p[[i]] <- ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme
}
do.call(grid.arrange,c(p, list(ncol=2)))
## Build Figure
fig3a <- (p[[1]] + p[[2]]) / (p[[3]] + p[[4]]) +
plot_annotation(tag_levels = "a")
ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme +
labs(tag = "(a)") +
coord_cartesian(clip = "off")
?labs
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none",
axis.text.y=element_text(colour="black",size=14),
axis.text.x=element_text(colour="black",size=15),
axis.title.y=element_text(colour="black",size=14),
strip.text = element_text(size = 15),
axis.title.x=element_blank(),
plot.title = element_text(colour="black", size=15, face="bold", hjust=0.5),
plot.tag = element_text(colour="black", size=14, face="bold"),
plot.subtitle = element_text(colour="black", size=15,  hjust=0.5))
ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme +
labs(tag = "(a)") +
coord_cartesian(clip = "off")
mytheme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none",
axis.text.y=element_text(colour="black",size=14),
axis.text.x=element_text(colour="black",size=15),
axis.title.y=element_text(colour="black",size=14),
strip.text = element_text(size = 15),
axis.title.x=element_blank(),
plot.title = element_text(colour="black", size=15, face="bold", hjust=0.5),
plot.tag = element_text(colour="black", size=16, face="bold"),
plot.subtitle = element_text(colour="black", size=15,  hjust=0.5))
# initiate plot list
p <- list()
## Loop to draw plots
for (i in 1:4) {
v_i <- pdep[[i]]
v_i$focal_var <- factor(v_i$focal_var, levels=c("reserve", "outside", "Port"))
v_i$Confinement <- factor(v_i$Confinement, levels=c("Unlock", "Lockdown"))
p[[i]] <- ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme +
labs(tag = "(a)") +
coord_cartesian(clip = "off")
}
## Save plot
png("01_Analyses_teleo/03_Outputs/Figure3a.png",
width = 1200, height = 1000, )
do.call(grid.arrange,c(p, list(ncol=2)))
dev.off()
letter[i]
letters[i]
## Loop to draw plots
for (i in 1:4) {
v_i <- pdep[[i]]
v_i$focal_var <- factor(v_i$focal_var, levels=c("reserve", "outside", "Port"))
v_i$Confinement <- factor(v_i$Confinement, levels=c("Unlock", "Lockdown"))
p[[i]] <- ggplot(v_i,aes(x=focal_var, y = pointp))+
#geom_jitter(data = v_i$res, mapping = aes(x = Protection, y = visregRes), colour="grey50", size=0.1) +
geom_crossbar(aes(ymin=low, ymax=up, fill = focal_var),
linetype=0, alpha=0.3) +
facet_wrap(~Confinement, scales="free_x") + # argument scales = "free_x" removes the empty factors (no Port during lockdown)
geom_errorbar(aes(ymin=pointp, ymax=pointp, colour = focal_var),
linetype=1, width=0.9, lwd=1.2) +
scale_colour_manual(values = c("darkblue", "cyan4",  "darkorange")) +
scale_fill_manual(values =  c("darkblue", "cyan4",  "darkorange")) +
labs(y="Species richness",
title=ind_names[i]) +
scale_x_discrete(labels = c("Reserve", "Fished", "Port")) +
mytheme +
labs(tag = paste("(", letters[i],")", sep="")) +
coord_cartesian(clip = "off")
}
## Save plot
png("01_Analyses_teleo/03_Outputs/Figure3a.png",
width = 1200, height = 1000, )
do.call(grid.arrange,c(p, list(ncol=2)))
dev.off()
